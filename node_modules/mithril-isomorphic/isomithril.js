/* jshint node:true */
'use strict';

var parseUrl = require('url').parse,
	path = require('path'),
	//fs = require('fs'),
	FS = require('q-io/fs'),
	Q = require('q'),
	Mithril = require('mithril'),
	mock = require('./mock.js');

var page,
	routesFname,
	app,
	routes,
	def,
	mod,
	root,
	script,
	rxApp,
	routeParams = {};



Mithril.deps(mock.window);

Mithril.route.param = function(key) {
	return routeParams[key];
};

Mithril.render = (function (original) {

	var logNode = function (node) {
		var prop, val, 
			style, styles = [],
			html = '';

		if (!node.nodeName && node.nodeValue) {
			return node.nodeValue;
		}
		html +=  '<' + node.nodeName;
		for (prop in node) {
			val = node[prop];
			if (typeof val == 'function') continue;
			switch (prop) {
				case 'nodeName':
				case 'parentNode':
				case 'childNodes':
				case 'pathname':
				case 'search':
					continue;
				case 'href':
					val = node.pathname;
					break;
				case 'className':
					prop = 'class';
					break;
				case 'style':
					if (val) {
						for (style in val) {
							if (val[style]) {
								styles.push(style + ': ' + val[style]);
							}
						}
						if (!styles.length) continue;
						val = styles.join(';');
					}
					break;
			}
			html += ' ' + prop + '="' + val + '"';
		}
		if (node.childNodes) {
			html +=  '>' + node.childNodes.reduce(function (prev, node) {
				return prev + logNode(node);
			},'') + '</' + node.nodeName + '>';
		} else {
			html +=  '/>';
		}
		return  html;
	};




	return function () {

		var result = original.apply(this, arguments);
		mock.html = mock.window.document.body.childNodes.reduce(function (prev, node) {
			return prev + logNode(node);
		},'');
		return result;
	};
})(Mithril.render);
	
module.exports = function (config) {
	


	config = config || {};
	page = config.page || 'index.html';
	app = config.app || './app';
	root = config.root || 'client';
	routesFname = config.routes || 'routes.js';
	script = config.script || '__.js';

	mock.window.location.pathname = root;
	rxApp = new RegExp(path.join('/', app, '/') + '(.*)');

	var r = require( path.resolve(app, routesFname)) ({
		route: function (d, r) {
			def = d;
			routes = r;
		},
		module: function (m) {
			mod = m;
		}
	});

	var out = path.resolve(app, script);
	FS.copy(require.resolve('mithril'), out).then(function () {
		return FS.listTree(app, function(fullPath) {
			return !( 
				path.extname(fullPath) != '.js' ||
				path.basename(fullPath) == script ||
				path.basename(fullPath) == routesFname
			);
		}).then(function (files) {
			return Q.all(files.map(function (file) {
				return FS.append(out, '\n;(' + require(path.resolve('./', file)).toString() + ')(Mithril)');
			}));
		});
	}).then(function() {
		if (mod) {
			return FS.append(out, '\n;Mithril.module(document.body,' + mod + ');');
		}
		if (routes) {
			var rs = [], r;
			for (r in routes) {
				rs.push('"' + r + '":' + routes[r]);
			}
			return FS.append(out, '\n;Mithril.route(document.body, "' + def + '", {' + rs.join(',') + '});');
		}
	});
			


	return function (req, res, next) {
		var url = parseUrl(req.url);

		console.log('req.url:', req.url);
		var match = rxApp.exec(url.pathname);
		if (match) {
			if (match[1] == script) {
				res.sendfile(path.join(app, match[1]));
				return;
			}
			res.send('(' + require(path.resolve(app, match[1])).toString() + ')(Mithril)');
		}

		var accept = req.headers.accept;
		if (
			req.method !== 'GET' ||
			accept.indexOf('application/json') === 0 || !(accept.indexOf('text/html') !== -1 || accept.indexOf('*/*') !== -1)
		) {
			return void next();
		}

		if (url.pathname.indexOf('.') !== -1) {
			return void next();
		}

		
		function routeByValue(router, path) {
			path = path.replace(/^\/\?/,'');
			routeParams = {};
			var replacer = function() {
						var keys = route.match(/:[^\/]+/g);
						var values = [].slice.call(arguments, 1, -2);
						for (var i = 0; i < keys.length; i++) routeParams[keys[i].replace(/:|\./g, "")] = decodeURIComponent(values[i]);
						return router[route];
					};
			for (var route in router) {
				if (route == path) return router[route];

				var matcher = new RegExp("^" + route.replace(/:[^\/]+?\.{3}/g, "(.*?)").replace(/:[^\/]+/g, "([^\\/]+)") + "$");

				if (matcher.test(path)) {
					return path.replace(matcher, replacer);
				}
			}
		}
		var a = routeByValue(routes, req.url) || routes[def];
		if (a) {
			a = require(path.resolve(app, a))(Mithril);
			Mithril.module(mock.window.document.body, a);
		}
						
		FS.read(path.join(root, page)).then(function (data) {
			var i = data.indexOf('{{body}}');
			if (i == -1) return void res.send(data);
			res.send(data.substr(0, i) + mock.html + '<script src="' + path.join('/', app, script) + '"></script>' + data.substr(i + 8));

		});
	};
};